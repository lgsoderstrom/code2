/*
BATCH CLASS
*/
global without sharing class SendRenewalEmailBatch10Days implements Database.Batchable<sObject>  {
    global Database.QueryLocator start(Database.BatchableContext BC) {
        Integer daysFromRenwal = 10;
        String activeStatus = 'Current';
        String query;
        if (Test.isRunningTest()) {
            query = 'SELECT Status__c, Send_10_Day_Email__c FROM Membership__c  WHERE Status__c  = :activeStatus AND Days_Until_Expiration__c = :daysFromRenwal limit 10';
        } else {
            query = 'SELECT Status__c, Send_10_Day_Email__c FROM Membership__c  WHERE Status__c = :activeStatus AND Days_Until_Expiration__c = :daysFromRenwal';
        }

            return Database.getQueryLocator(query);
    }


    global void execute(Database.BatchableContext BC, List <Membership__c> scope) {
        system.debug('scope: ' + scope.size());
        list <Membership__c> membershipsToUpdate = new list <Membership__c>(); 
            for (Membership__c membership : scope) {
                membership.Send_10_Day_Email__c = true;
                membershipsToUpdate.add(membership);
            }
        
        system.debug('membershipsToUpdate: ' + membershipsToUpdate);
        
        if(membershipsToUpdate.size() > 0){ 
            system.debug('membershipsToUpdate: ' + membershipsToUpdate.size());
        update membershipsToUpdate;
        }
    }

    global void finish(Database.BatchableContext BC)
        {
            system.debug('Batch complete!');
        }  
       }
       
 
 /*
 SCHEDULER CLASS
 */
      
       
       global without sharing class SendRenewalEmail10DayScheduler implements Schedulable  {
    global void execute(SchedulableContext sc)
    {
        SendRenewalEmailBatch10Days batchClass = new SendRenewalEmailBatch10Days ();
        database.executebatch(batchClass,50);   
    }
}

/*
TEST CLASS
*/


@isTest
public class SendRenewalEmailBatch10DaysTest {
    
    @isTest
    public static void test10DaysAlert(){

       Contact testContact = new Contact(FirstName='Test', LastName='Contact',Email='Test@test.com');
        insert testContact; 
        Membership__c testMembership = new Membership__c(Name='Test Membership', 
                                                         Status__c='Current',
                                                         End_Date__c=system.today().addDays(30),
                                                        Contact__c = testContact.Id);
        insert testMembership;
        
        // workflow updated End Date on insert, so we need to update it back to 30 days from today
        testMembership.End_Date__c=system.today().addDays(10); 
        update testMembership; 
        
         Membership__c testMembership2 = new Membership__c(Name='Test Membership', 
                                                         Status__c='Current',
                                                         End_Date__c=system.today().addDays(100),
                                                        Contact__c = testContact.Id);
        insert testMembership2; 
        testMembership2.End_Date__c=system.today().addDays(10); 
        update testMembership2; 
        
        Membership__c testMembership3 = new Membership__c(Name='Test Membership', 
                                                         Status__c='Current',
                                                         End_Date__c=system.today().addDays(100),
                                                        Contact__c = testContact.Id);
        insert testMembership3; 
        
        test.startTest(); 
        Database.executeBatch(new SendRenewalEmailBatch10Days(), 10);
        String CRON_EXP = '0 0 0 15 3 ? *';
		 String jobId = System.schedule('ScheduleApexClassTest',  CRON_EXP, new SendRenewalEmail10DayScheduler());
        test.stopTest(); 

         list <Membership__c> updatedMemberships = [Select X10_Day_Email_Sent__c , Send_10_Day_Email__c
                                FROM Membership__c
                                WHERE Send_10_Day_Email__c = true];
       
        // two of the test Membership records are 10 days away and should have been updated
        system.assert(updatedMemberships.size() == 2);
        // confirm that the sent field was time stamped
        system.assert(updatedMemberships[0].X10_Day_Email_Sent__c != null);
        // confirm that third Membership (365 days away) was not updated
        system.assert(testMembership3.Send_10_Day_Email__c == false);
    }
}
