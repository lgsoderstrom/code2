<aura:component controller="getInventoryTransactionsLightning" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,force:lightningQuickAction" access="global" >
	<aura:attribute name="startDate" type="Date"/>
    <aura:attribute name="endDate" type="Date"/>
    <aura:attribute name="legacyTransaction" type="Integer" default="4"/>
    <aura:attribute name="coreTransactions" type="Integer" default="6"/>
    <aura:attribute name="minEndDate" type="String"/>
    <aura:attribute name="errorMessage" type="String"/>
    <aura:attribute name="disableCore" type="Boolean" default="false"/>
    <aura:attribute name="disableLegacy" type="Boolean" default="false"/>
    <aura:attribute name="spinner" type="Boolean" default="false"/>
   
    <lightning:card iconName="utility:change_record_type" title="Get Transactions">
        <aura:if isTrue="{!v.spinner}">
    <lightning:spinner alternativeText="Loading" size="medium"/>
    </aura:if>
        <lightning:layoutItem class='slds-m-left_medium slds-m-top_xxx-small'> 
            <lightning:input type="date" name="input1" label="Start Date" value="{!v.startDate}" onchange="{!c.setMinDate}" />
        </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-top_xxx-small'> 
			<lightning:input type="date" name="input2" label="End Date" value="{!v.endDate}" min="{!v.minEndDate}" disabled="{!empty(v.startDate)}"/>  
            </lightning:layoutItem>
                <lightning:layout horizontalAlign="center" class='slds-m-top_medium'> 
          <!--  <lightning:button variant='Neutral' label="Return to Order" title="Neutral action" onclick="{! c.handleClick }"/> -->
            <lightning:button variant='brand' label="Create Core Transactions" disabled="{!or(empty(v.endDate),v.disableCore)}" title="Neutral action" onclick="{!c.doCallout}"/>
            </lightning:layout>
            <!--<lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_small'> 
                Legacy Card Load Transactions: {!v.legacyTransaction}
                </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Core Load Transactions: {!v.coreTransactions}
                </lightning:layoutItem> -->

        <lightning:layout horizontalAlign="center" class='slds-m-top_medium'> 
          <!--  <lightning:button variant='Neutral' label="Return to Order" title="Neutral action" onclick="{! c.handleClick }"/> -->
            <lightning:button variant='brand' label="Create Legacy Transactions" disabled="{!or(empty(v.endDate),v.disableLegacy)}" title="Neutral action" onclick="{!c.doCalloutLegacy}"/>
            </lightning:layout>
        
        <aura:if isTrue="{!!empty(v.errorMessage)}">
        <h1>Callout result: {!v.errorMessage}</h1>
        </aura:if>

    </lightning:card>


</aura:component>

({
	setMinDate : function(component, event, helper) {
        console.log('3');
        console.log(component.get("v.startDate"));
        component.set("v.minEndDate",component.get("v.startDate"));
	},
    
    doCallout : function(component, event, helper) {
        component.set("v.spinner", true);
          var action = component.get("c.coreInventoryInsert");
        action.setParams({"calloutStartDate": component.get('v.startDate'),"calloutEndDate":component.get('v.endDate')});
        console.log(action); 
        action.setCallback(this, function(response){
            var state = response.getState();
            if (component.isValid() && state === "SUCCESS") {
                var wrapper = response.getReturnValue();
               /* if(wrapper.errorMessage !== '' && wrapper.errorMessage !== undefined){
                   // console.log('test; ' + wrapper.errorMessage);
                   // component.set("v.calloutError",true);
                } else {
                    component.set("v.calloutError",false);
                } */
               // component.set("v.cardWrapper",wrapper);
                component.set("v.spinner", false);
                component.set("v.disableCore",true);
                console.log('state: ' + state);
                component.set("v.errorMessage",state);
               // component.set("v.flowStep", 2);
            } 
            else { 
                console.log("Failed with state: " + response.getReturnValue());
            }  
        });
        $A.enqueueAction(action); 	
	},
    doCalloutLegacy : function(component, event, helper) {
        component.set("v.spinner", true);
          var action = component.get("c.legacyInventoryInsert");
        action.setParams({"calloutStartDate": component.get('v.startDate'),"calloutEndDate":component.get('v.endDate')});
        console.log(action); 
        action.setCallback(this, function(response){
            var state = response.getState();
            if (component.isValid() && state === "SUCCESS") {
                var wrapper = response.getReturnValue();
               /* if(wrapper.errorMessage !== '' && wrapper.errorMessage !== undefined){
                   // console.log('test; ' + wrapper.errorMessage);
                   // component.set("v.calloutError",true);
                } else {
                    component.set("v.calloutError",false);
                } */
               // component.set("v.cardWrapper",wrapper);
                component.set("v.spinner", false);
                component.set("v.disableLegacy",true);
               // component.set("v.flowStep", 2);
            } 
            else { 
                console.log("Failed with state: " + response.getReturnValue());
            }  
        });
        $A.enqueueAction(action); 	
	},
})


public class getInventoryTransactionsLightning {
    
    
    public static ParseTokenJson getToken(){
        String jsonResponseToken;
        HttpRequest objReqToken = new HttpRequest();
        HttpResponse objRespToken = new HttpResponse(); 
        Http objHttpToken = new Http();
        objReqToken.setEndpoint('https://core.rapidefund.com:9014/prepaidservices/secure/oauth/token?grant_type=password&username=ChatakPrepaidAdminUser&password=ChatakPrepaidAdminPass');
        objReqToken.setMethod('GET');
        objReqToken.setHeader('Content-Type', 'application/json');   //'text/xml'
        objReqToken.setHeader('Authorization', 'Basic Q2hhdGFrUHJlcGFpZEFkbWluQmFzaWNBdXRoOkNoYXRha0FkbWluQFNlY3VyZQ=='); 
          
        objReqToken.setTimeout(120000);           
        objRespToken = objHttpToken.send(objReqToken);     
        String resBodyToken = objRespToken.getBody();//.replaceAll('Currency','CurrencyData'); 
        system.debug('resBody: ' + resBodyToken);
        ParseTokenJson n = ParseTokenJson.parse(resBodyToken);
        system.debug('tester: ' + n.access_token);
        return n;
    }
    
    
    public static getInventoryTransactionJSONParse getCoreTransactionsCallout(String startDateString, String endDateString){
        Date startDate = Date.valueOf(startDateString);
        Date endDate = Date.valueOf(endDateString);
        
        system.debug('startDate: ' + startDate);
        system.debug('endDate: ' + endDate);
        ParseTokenJson n = getToken();
        system.debug('tester: ' + n.access_token); 
        String startString;
        String endString;
        String startDay;
        String endDay;
        String startMonth;
        String endMonth;
        
        if(startDate.month() < 10){ 
        startMonth = '0' + startDate.month(); 
        } else {
        startMonth = string.valueOf(startDate.month()); 
        }
        
         if(startDate.day() < 10){ 
        startDay = '0' + startDate.day(); 
        } else {
        startDay = string.valueOf(startDate.day()); 
        }
        
        if(endDate.month() < 10){ 
        endMonth = '0' + endDate.month(); 
        } else {
        endMonth = string.valueOf(endDate.month());  
        }
        
         if(endDate.day() < 10){ 
        endDay = '0' + endDate.day(); 
        } else {
        endDay = string.valueOf(endDate.day());  
        }
        
        startString = '"' + startMonth + '/' + startDay + '/' + startDate.year() + '"'; 
        endString = '"' + endMonth + '/' + endDay + '/' + endDate.year() + '"';  
        system.debug('startString: ' + startString); 
        system.debug('endString: ' + endString); 
        
         
    	String jsonResponse;
        HttpRequest objReq = new HttpRequest();
        HttpResponse objResp = new HttpResponse(); 
        Http objHttp = new Http();
        objReq.setEndpoint('https://core.rapidefund.com:9014/prepaidservices/rest/crm-external-services/getCardInventory');
        String jsonBody ='{"fromDate":' + startString + ',"toDate":' + endString + '}';    //"8WgVUE8hqqdFlxO/6Gtd+CXSEUKBnKH4enEMA8dlIGu8U4xDYc64GQTVpqHrVd0H"
        
        system.debug('jsonBody: ' + jsonBody); 
        objReq.setBody(jsonBody);
        HTTP auth = new HTTP(); 
        objReq.setMethod('POST');
        objReq.setHeader('Authorization', 'bearer ' + n.access_token);
        objReq.setHeader('Content-Type', 'application/json');   //'text/xml'
        objReq.setTimeout(120000);           
        objResp = objHttp.send(objReq);
        System.debug('$$$$' + objResp);      
        String resBody = objResp.getBody(); 
        system.debug('resBody: ' + resBody);
        
        getInventoryTransactionJSONParse response = getInventoryTransactionJSONParse.parse(resBody);
        system.debug('responseList: ' + response);
        system.debug('responseList2: ' + response.listOfCardProfiles);  
        return response;  
    }
    
    @AuraEnabled     
    public static String coreInventoryInsert(String calloutStartDate, String calloutEndDate){  
             set <String> cardStringSet = new set <String>(); 
             getInventoryTransactionJSONParse coreResponse = getCoreTransactionsCallout(calloutStartDate, calloutEndDate);        
           list <getInventoryTransactionJSONParse.ListOfCardProfiles> coreInventory = coreResponse.listOfCardProfiles;
             
             system.debug('responseList3: ' + coreResponse.listOfCardProfiles); 
        if(coreResponse.listOfCardProfiles != null){ 
         
             Map <Integer, Integer> agentToCountMap = new Map <Integer, Integer>(); 
         list <Inventory_Transaction__c> transactionsToInsert = new list <Inventory_Transaction__c>(); 
         
         for (getInventoryTransactionJSONParse.ListOfCardProfiles response : coreInventory){
             if(response.agentCardProfileID != null){ 
             agentToCountMap.put(response.agentCardProfileID, response.firstTimeLoadCount); 
             cardStringSet.add(String.valueOf(response.agentCardProfileId));
             }
         }
             
             system.debug('agentToCountMap: ' + agentToCountMap); 
             system.debug('cardStringSet: ' + cardStringSet); 
            
         
         
       for(Inventory_Item__c item : [Select Id,Agent_Number__c,Card_Profile_ID__c
                                    FROM Inventory_Item__c
                                     WHERE Card_Profile_ID__c in :cardStringSet
                                    AND Agent_Number__c = null]){ 
                                        if(item.Card_Profile_ID__c != null){ 
                                        system.debug('3: ' + item.Agent_Number__c); 
                                        
          Inventory_Transaction__c transactionRecord = new Inventory_Transaction__c(Inventory_Item__c=item.Id,
                                                                               Quantity__c =agentToCountMap.get(integer.valueOf(item.Card_Profile_ID__c)));
                                         transactionsToInsert.add(transactionRecord);
                                     }  
                                    }
            system.debug('transactionsToInsertbefore: ' + transactionsToInsert);
            insert transactionsToInsert; 
            system.debug('transactionsToInsertafter: ' + transactionsToInsert);
         
     }
        return coreResponse.errorMessage; 
    }
    
    public static list<InventoryResponse> getLegacyTransactionsCallout(String startDateString, String endDateString){  
        Date startDate = Date.valueOf(startDateString);
        Date endDate = Date.valueOf(endDateString);
            String startString;
        String endString;
        String startDay;
        String endDay;
        String startMonth;
        String endMonth;
        
        if(startDate.month() < 10){ 
        startMonth = '0' + startDate.month(); 
        } else {
        startMonth = string.valueOf(startDate.month()); 
        }
        
         if(startDate.day() < 10){ 
        startDay = '0' + startDate.day(); 
        } else {
        startDay = string.valueOf(startDate.day()); 
        }
        
        if(endDate.month() < 10){ 
        endMonth = '0' + endDate.month(); 
        } else {
        endMonth = string.valueOf(endDate.month());  
        }
        
         if(endDate.day() < 10){ 
        endDay = '0' + endDate.day(); 
        } else {
        endDay = string.valueOf(endDate.day());  
        }
        
        startString = startMonth + '-' + startDay + '-' + startDate.year(); 
        endString = endMonth + '-' + endDay + '-' + endDate.year();  
        system.debug('startString: ' + startString); 
        system.debug('endString: ' + endString); 
        
        

		ParseTokenJson n = getToken();
        String jsonResponse;
        HttpRequest objReq = new HttpRequest();
        HttpResponse objResp = new HttpResponse(); 
        Http objHttp = new Http();
        objReq.setEndpoint('https://rapidefund.com/MPGateway/IAG');
		objReq.setBody('<!DOCTYPE pip SYSTEM "https://www.rapidefund.com/MPGateway/dtd/mycropod_rq_1_0.dtd">'
                       + '<pip>' 
                       + '<client_id>GFGD84KJBAPDMZKSTDG36612107DHFHE3PRFDSEB</client_id>' 
                       + '<get_card_first_time_load_count_per_agent>' 
                       + '<from_date>'+startString+'</from_date>'
                       + '<to_date>'+endString+'</to_date>'
                       + '<agent_number></agent_number>'
                       + '</get_card_first_time_load_count_per_agent>' 
                       + '</pip>');
        HTTP auth = new HTTP(); 
        objReq.setMethod('POST');
        objReq.setHeader('Content-Type', 'text/xml'); 
        objReq.setTimeout(120000);           
        objResp = objHttp.send(objReq);    
        String resBody = objResp.getBody(); 
        system.debug('resBody: ' + resBody);
        list <InventoryResponse> responseList = new list <InventoryResponse>(); 
        if(!test.isRunningTest()){ 
        Dom.Document doc = objResp.getBodyDocument(); 
        Dom.XMLNode rss = doc.getRootElement();
        
        
        
        for(Dom.XMLNode child : rss.getChildren()){
            for(Dom.XMLNode channel : child.getChildren()){
                if(channel.getName() != null){
                    if (channel.getName().contains('total_cards_per_agent')){ 
                        InventoryResponse response = new InventoryResponse();             
                for(Dom.XMLNode newChannel : channel.getChildren()){                  
                    if(newChannel.getName() != null){
                        if(newChannel.getName().contains('agent_number')){
                        response.agentNumber = newChannel.getText();
                        }
                    }
                    if(newChannel.getName() != null){
                        if(newChannel.getName().contains('firstTimeLoadCount')){
                        response.loadCount = newChannel.getText(); 
                        }
                    }
                    
                }
                        responseList.add(response);
                    }
                }
            }
        }  
        }
        system.debug('responseList: ' + responseList); 
        return responseList;
    }
    
    @AuraEnabled
    public static void legacyInventoryInsert(String calloutStartDate, String calloutEndDate){  
         Map <String, String> agentToCountMap = new Map <String, String>(); 
         list <Inventory_Transaction__c> transactionsToInsert = new list <Inventory_Transaction__c>(); 
         list<InventoryResponse> inventoryResponses = getLegacyTransactionsCallout(calloutStartDate,calloutEndDate); 
         
         for (InventoryResponse response : inventoryResponses){
             agentToCountMap.put(response.agentNumber, response.LoadCount);           
         }
         
         
       for(Inventory_Item__c item : [Select Id,Agent_Number__c
                                    FROM Inventory_Item__c
                                     WHERE Agent_Number__c in :agentToCountMap.keySet()]){
          Inventory_Transaction__c transactionRecord = new Inventory_Transaction__c(Inventory_Item__c=item.Id,
                                                                               Quantity__c =integer.valueof(agentToCountMap.get(item.Agent_Number__c)));
                                         transactionsToInsert.add(transactionRecord);
                                     }  
         
         system.debug('transactionsToInsertbefore: ' + transactionsToInsert);
         insert transactionsToInsert; 
         system.debug('transactionsToInsertafter: ' + transactionsToInsert);
         
     }
    
   
    
    public class InventoryResponse
        {
            public string agentNumber { get; set; }
            public string loadCount { get; set; }
        }
   
}

@isTest
public class getInventoryTransactionsLightningTest {
    
    @isTest
    public static void testCore(){
        Date startDate = system.today().addDays(-30); 
        Date endDate = system.today().addDays(-1);
        test.setMock(HttpCalloutMock.class, new mockCallout());
        test.startTest(); 
        
        getInventoryTransactionsLightning.coreInventoryInsert(string.valueOf(startDate), string.valueOf(endDate)); 
        test.StopTest(); 
        
        
    }
    
    @isTest
    public static void testLegacy(){
        Date startDate = system.today().addDays(-30); 
        Date endDate = system.today().addDays(-1);
        test.setMock(HttpCalloutMock.class, new mockCallout());
        test.startTest(); 
        getInventoryTransactionsLightning.legacyInventoryInsert(string.valueOf(startDate), string.valueOf(endDate)); 
        test.StopTest(); 
        
        
    }
    
    public class mockCallout implements HttpCalloutMock{
        public HttpResponse respond(HTTPRequest req){
            HttpResponse res = new HttpResponse(); 
            res.setStatus('Ok');
            res.setStatusCOde(200);
            String body = '{"errorCode":"CEC_0001","errorMessage":"SUCCESS","listOfCardProfiles":[{"firstTimeLoadCount":1023},{"agentCardProfileID":892,"firstTimeLoadCount":186},{"agentCardProfileID":810,"firstTimeLoadCount":11},{"agentCardProfileID":1407,"firstTimeLoadCount":12},{"agentCardProfileID":1000,"firstTimeLoadCount":73},{"agentCardProfileID":1495,"firstTimeLoadCount":2},{"agentCardProfileID":988,"firstTimeLoadCount":277},{"agentCardProfileID":1542,"firstTimeLoadCount":83},{"agentCardProfileID":889,"firstTimeLoadCount":80},{"agentCardProfileID":2708,"firstTimeLoadCount":160},{"agentCardProfileID":2413,"firstTimeLoadCount":10},{"agentCardProfileID":1545,"firstTimeLoadCount":252},{"agentCardProfileID":1149,"firstTimeLoadCount":43},{"agentCardProfileID":757,"firstTimeLoadCount":4},{"agentCardProfileID":880,"firstTimeLoadCount":92},{"agentCardProfileID":252,"firstTimeLoadCount":11},{"agentCardProfileID":1462,"firstTimeLoadCount":329},{"agentCardProfileID":1440,"firstTimeLoadCount":1568},{"agentCardProfileID":1304,"firstTimeLoadCount":7},{"agentCardProfileID":44,"firstTimeLoadCount":69},{"agentCardProfileID":1397,"firstTimeLoadCount":256},{"agentCardProfileID":974,"firstTimeLoadCount":32},{"agentCardProfileID":696,"firstTimeLoadCount":36},{"agentCardProfileID":2715,"firstTimeLoadCount":10},{"agentCardProfileID":1155,"firstTimeLoadCount":272},{"agentCardProfileID":1537,"firstTimeLoadCount":31},{"agentCardProfileID":1177,"firstTimeLoadCount":328},{"agentCardProfileID":1190,"firstTimeLoadCount":20},{"agentCardProfileID":763,"firstTimeLoadCount":46},{"agentCardProfileID":2657,"firstTimeLoadCount":57},{"agentCardProfileID":2687,"firstTimeLoadCount":97},{"agentCardProfileID":526,"firstTimeLoadCount":11},{"agentCardProfileID":1290,"firstTimeLoadCount":22},{"agentCardProfileID":1001,"firstTimeLoadCount":119},{"agentCardProfileID":1416,"firstTimeLoadCount":113},{"agentCardProfileID":991,"firstTimeLoadCount":23},{"agentCardProfileID":825,"firstTimeLoadCount":10},{"agentCardProfileID":645,"firstTimeLoadCount":64},{"agentCardProfileID":2706,"firstTimeLoadCount":31},{"agentCardProfileID":432,"firstTimeLoadCount":114},{"agentCardProfileID":1295,"firstTimeLoadCount":45},{"agentCardProfileID":888,"firstTimeLoadCount":30},{"agentCardProfileID":1101,"firstTimeLoadCount":40},{"agentCardProfileID":908,"firstTimeLoadCount":98},{"agentCardProfileID":1575,"firstTimeLoadCount":8},{"agentCardProfileID":2661,"firstTimeLoadCount":181},{"agentCardProfileID":673,"firstTimeLoadCount":187},{"agentCardProfileID":709,"firstTimeLoadCount":55},{"agentCardProfileID":2697,"firstTimeLoadCount":23},{"agentCardProfileID":987,"firstTimeLoadCount":218},{"agentCardProfileID":1173,"firstTimeLoadCount":185},{"agentCardProfileID":1114,"firstTimeLoadCount":24},{"agentCardProfileID":900,"firstTimeLoadCount":28},{"agentCardProfileID":261,"firstTimeLoadCount":21},{"agentCardProfileID":1524,"firstTimeLoadCount":21},{"agentCardProfileID":1566,"firstTimeLoadCount":22},{"agentCardProfileID":1354,"firstTimeLoadCount":22},{"agentCardProfileID":623,"firstTimeLoadCount":25},{"agentCardProfileID":1571,"firstTimeLoadCount":24},{"agentCardProfileID":1390,"firstTimeLoadCount":143},{"agentCardProfileID":2682,"firstTimeLoadCount":29},{"agentCardProfileID":503,"firstTimeLoadCount":5},{"agentCardProfileID":907,"firstTimeLoadCount":76},{"agentCardProfileID":2271,"firstTimeLoadCount":1},{"agentCardProfileID":877,"firstTimeLoadCount":131},{"agentCardProfileID":1005,"firstTimeLoadCount":36},{"agentCardProfileID":1323,"firstTimeLoadCount":82},{"agentCardProfileID":1464,"firstTimeLoadCount":14},{"agentCardProfileID":1538,"firstTimeLoadCount":40},{"agentCardProfileID":690,"firstTimeLoadCount":316},{"agentCardProfileID":1376,"firstTimeLoadCount":61},{"agentCardProfileID":1344,"firstTimeLoadCount":24},{"agentCardProfileID":1157,"firstTimeLoadCount":16},{"agentCardProfileID":943,"firstTimeLoadCount":64},{"agentCardProfileID":1561,"firstTimeLoadCount":11},{"agentCardProfileID":1475,"firstTimeLoadCount":31},{"agentCardProfileID":2663,"firstTimeLoadCount":401},{"agentCardProfileID":2650,"firstTimeLoadCount":62},{"agentCardProfileID":1567,"firstTimeLoadCount":48},{"agentCardProfileID":1124,"firstTimeLoadCount":182},{"agentCardProfileID":1518,"firstTimeLoadCount":223},{"agentCardProfileID":2692,"firstTimeLoadCount":3},{"agentCardProfileID":2690,"firstTimeLoadCount":16},{"agentCardProfileID":1557,"firstTimeLoadCount":273},{"agentCardProfileID":2653,"firstTimeLoadCount":7},{"agentCardProfileID":2560,"firstTimeLoadCount":1}]}';
            res.setBody(body);
            return res;
        }
    }

}

public class getInventoryTransactionJSONParse {

	public String errorCode;
	public String errorMessage;
	public List<ListOfCardProfiles> listOfCardProfiles;

	public class ListOfCardProfiles {
		public Integer firstTimeLoadCount;
		public Integer agentCardProfileID;
	}

	
	public static getInventoryTransactionJSONParse parse(String json) {
		return (getInventoryTransactionJSONParse) System.JSON.deserialize(json, getInventoryTransactionJSONParse.class);
	}
}
