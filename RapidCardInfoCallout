<aura:component implements="flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global" controller="getCardInfoController">
	
	<aura:attribute name="cardNumber" type="Integer"/>
    <aura:attribute name="holderName" type="Integer"/>
    <aura:attribute name="legacyTransaction" type="Integer" default="4"/>
    <aura:attribute name="coreTransactions" type="Integer" default="6"/>
    <aura:attribute name="flowStep" type="integer" default="1"/>
    <aura:attribute name="cardWrapper" type="CardFlowWrapper"/>
    <aura:attribute name="spinner" type="Boolean" default="false"/>
    
   
   
    
    <lightning:card iconName="utility:change_record_type" title="Get Card Info">
        <aura:if isTrue="{!v.flowStep == 1}">
             <aura:if isTrue="{!v.spinner}">
    <lightning:spinner alternativeText="Loading" size="medium"/>
    </aura:if>
        <lightning:layoutItem class='slds-m-left_medium slds-m-top_xxx-small'> 
            <lightning:input type="integer" name="input1" label="Card Number" value="{!v.cardNumber}" disabled="{!!empty(v.holderName)}" />
        </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-top_xxx-small'> 
			<lightning:input type="integer" name="input2" label="Card Holder Name" value="{!v.holderName}" disabled="{!!empty(v.cardNumber)}"/>  
            </lightning:layoutItem>
                <lightning:layout horizontalAlign="center" class='slds-m-top_medium'> 
          <!--  <lightning:button variant='Neutral' label="Return to Order" title="Neutral action" onclick="{! c.handleClick }"/> -->
            <lightning:button variant='brand' label="Get Card Info" disabled="{!and(empty(v.cardNumber),empty(v.holderName))}" title="Neutral action" onclick="{!c.doCallout}"/>
            </lightning:layout>
        </aura:if>
        
        <aura:if isTrue="{!v.flowStep == 2}">
            <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_small'> 
                Legacy Card Load Transactions: {!v.legacyTransaction}
                </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                First Name: {!v.cardWrapper.cardFirstName}
                </lightning:layoutItem>    
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Last Name: {!v.cardWrapper.cardLastName}
                </lightning:layoutItem>
            <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Date of Birth: {!v.cardWrapper.cardDOB}
                </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                SSN (Last Four Digits): {!v.cardWrapper.cardSSN}
                </lightning:layoutItem>
            <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Email: {!v.cardWrapper.cardEmail}
                </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Address: {!v.cardWrapper.cardAddress}
                </lightning:layoutItem>
            <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                (Agent Name) Loading Facility: {!v.cardWrapper.cardAgentName}
                </lightning:layoutItem>
        <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Balance: {!v.cardWrapper.cardBalance}
                </lightning:layoutItem>
            <lightning:layoutItem class='slds-m-left_medium slds-m-right_medium slds-m-top_xx-small'> 
                Card Status: {!v.cardWrapper.cardStatus}
                </lightning:layoutItem>

        <lightning:layout horizontalAlign="center" class='slds-m-top_medium'> 
          <!--  <lightning:button variant='Neutral' label="Return to Order" title="Neutral action" onclick="{! c.handleClick }"/> -->
            <lightning:button variant='brand' label="Create Inventory Transactions" disabled="{!or(empty(v.startDate),empty(v.endDate))}" title="Neutral action" onclick="{!c.printLabels}"/>
            </lightning:layout>
        </aura:if>

    </lightning:card>

</aura:component>


({
	doCallout : function(component, event, helper) {
        component.set("v.spinner", true);
          var action = component.get("c.getCardInfo");
        action.setParam('cardNumber', component.get('v.cardNumber'));
        console.log(action); 
        action.setCallback(this, function(response){
            var state = response.getState();
            if (component.isValid() && state === "SUCCESS") {
                var wrapper = response.getReturnValue();
                component.set("v.cardWrapper",wrapper);
                component.set("v.spinner", false);
                component.set("v.flowStep", 2);
            } 
            else { 
                console.log("Failed with state: " + response.getReturnValue());
            }  
        });
        $A.enqueueAction(action); 	
	}
})


public class CardFlowWrapper {
    
	@auraEnabled
    public String enteredCardNumber{get; set;}
    @auraEnabled
    public String programId{get; set;}
    @auraEnabled
    public String agentNumber{get; set;}
    @auraEnabled
    public String errorMessage{get; set;}
    @auraEnabled
    public String cardAccountNumber{get; set;}
    @auraEnabled
    public String cardAgentAccountNumber{get; set;}
    @auraEnabled
    public String cardPartnerName{get; set;}
    @auraEnabled
    public Date accountActivationDate{get; set;}
    @auraEnabled
    public String cardId{get; set;}
    @auraEnabled
    public String cardLastFourDigits{get; set;}
    @auraEnabled
    public Date cardExpiringDate{get; set;}
    @auraEnabled
    public String customerId{get; set;}
    @auraEnabled
    public String cardFirstName{get; set;}
    @auraEnabled
    public String cardLastName{get; set;}
    @auraEnabled
    public Date cardDOB{get; set;}
    @auraEnabled
    public String cardSSN{get; set;}
    @auraEnabled
    public String cardEmail{get; set;}
    @auraEnabled
    public String cardAddress{get; set;}
    @auraEnabled
    public String cardAgentName{get; set;}
    @auraEnabled
    public String cardAvailableBalance{get; set;}
    @auraEnabled
    public String cardCurrentBalance{get; set;}
    @auraEnabled
    public String cardStatus{get; set;}
     @auraEnabled
    public String accountStatus{get; set;}
    @auraEnabled
    public String address1{get; set;}
    @auraEnabled
    public String address2{get; set;}
    @auraEnabled
    public String city{get; set;}
    @auraEnabled
    public String state{get; set;}
    @auraEnabled
    public String country{get; set;}
    @auraEnabled
    public String zip{get; set;}

}

public class getCardInfoController {
    
    @auraEnabled
    public static CardFlowWrapper getCardInfo(String cardNumber, String holderName){ 
        system.debug('cardNumber: ' + cardNumber);
        system.debug('holderName: ' + holderName);
        //FIqIevLcj4H/FMFlyJd6UhRRZDx+o1QT0c5C/3z25UjGq4WIoXkTX3A9kcwGZIFC
        String jsonResponse;
        HttpRequest objReq = new HttpRequest();
        HttpResponse objResp = new HttpResponse(); 
        Http objHttp = new Http();
        objReq.setEndpoint('https://rapidefund.com/MPGateway/IAG');
        objReq.setBody('<!DOCTYPE pip SYSTEM "https://www.rapidefund.com/MPGateway/dtd/mycropod_rq_1_0.dtd">'
                       + '<pip>' 
                       + '<client_id>GFGD84KJBAPDMZKSTDG36612107DHFHE3PRFDSEB</client_id>' 
                       + '<get_card>' 
                       + '<card_number>' + cardNumber + '</card_number>' 
                       + '</get_card>' 
                       + '</pip>');
        
        
        objReq.setMethod('POST');
        objReq.setHeader('Content-Type', 'text/xml');   
        objReq.setTimeout(120000);           
        objResp = objHttp.send(objReq);  
        String resBody = objResp.getBody();//.replaceAll('Currency','CurrencyData'); 
        Dom.Document doc = objResp.getBodyDocument(); 
        Dom.XMLNode rss = doc.getRootElement();
        CardFlowWrapper wrapper = new CardFlowWrapper();
        if(cardNumber.length() > 4){
            wrapper.enteredCardNumber = cardNumber.right(4);  
        }
        for(Dom.XMLNode child : rss.getChildren()){
            for(Dom.XMLNode channel : child.getChildren()){
                
                for(Dom.XMLNode newChannel : channel.getChildren()){
                    system.debug('3: ' + newChannel.getName());
                    system.debug('4: ' + newChannel.getText());
                    if(newChannel.getName() == 'first_name'){
                        system.debug('in!!');
                        wrapper.cardFirstName = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'last_name'){
                        system.debug('in!!');
                        wrapper.cardLastName = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'balance'){
                        system.debug('in!!');
                        wrapper.cardCurrentBalance = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'street_address_1'){
                        system.debug('in!!');
                        wrapper.cardAddress = newChannel.getText() + ', '; 
                    }
                    if(newChannel.getName() == 'city'){
                        system.debug('in!!');
                        wrapper.cardAddress += newChannel.getText() + ', '; 
                    }
                    if(newChannel.getName() == 'state'){
                        system.debug('in!!');
                        wrapper.cardAddress += newChannel.getText() + ', '; 
                    }
                    if(newChannel.getName() == 'country'){
                        system.debug('in!!');
                        wrapper.cardAddress += newChannel.getText() + ', '; 
                    }
                    if(newChannel.getName() == 'zip'){
                        system.debug('in!!');
                        wrapper.cardAddress += newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'primary_ssn'){
                        system.debug('in!!');
                        wrapper.cardSSN = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'primary_birthdate'){
                        Date dobDate = Date.newInstance(integer.valueof(newChannel.getText().right(4)), integer.valueof(newChannel.getText().left(2)), integer.valueof(newChannel.getText().substring(3,5)));     
                        wrapper.cardDOB = dobDate; 
                    }
                    if(newChannel.getName() == 'email_address'){
                        system.debug('in!!');
                        wrapper.cardEmail = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'status'){
                        system.debug('in!!');
                        wrapper.cardStatus = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'account_num'){
                        system.debug('in!!');
                        wrapper.cardAccountNumber = newChannel.getText(); 
                    }
                    if(newChannel.getName() == 'expiration_date'){
                        Date expDate = Date.newInstance(integer.valueof(newChannel.getText().right(4)), integer.valueof(newChannel.getText().left(2)), integer.valueof(newChannel.getText().substring(3,5)));
                        wrapper.cardExpiringDate = expDate; 
                    }
                    if(newChannel.getName() == 'activation_date'){
                        system.debug('22: ' + newChannel.getText());
                        system.debug('22: ' + newChannel.getText().substring(6,10));
                        String tester = newChannel.getText().substring(7,10);
                        // Integer tester1 = newChannel.getText().substring(7,10);
                        Integer tester2 = integer.valueOf(tester);
                        system.debug(tester);
                        system.debug(tester2);
                        system.debug('22: ' + integer.valueof(newChannel.getText().substring(6,10)));
                        Date actDate = Date.newInstance(integer.valueof(newChannel.getText().substring(6,10)), integer.valueof(newChannel.getText().left(2)), integer.valueof(newChannel.getText().substring(3,5)));     
                        wrapper.accountActivationDate = actDate; 
                    }
                    if(newChannel.getName() == 'agent_num'){
                        wrapper.agentNumber = newChannel.getText(); 
                    }
                    
                    
                    
                    if(newChannel.getName() == 'program_id'){
                        wrapper.programId = newChannel.getText(); 
                    }
                    
                    
                    
                    if(newChannel.getName() == 'error_message'){
                        // system.debug('in!!');
                        //if('Invalid Card Number' == newChannel.getText()){
                        wrapper.errorMessage = newChannel.getText(); 
                        // } 
                    }
                }
            }
        }
        
        return wrapper; 
        
    }
    
    @auraEnabled
    public static Boolean createCaseDb(String cardWrapperString){ 
        Boolean isSuccess = true; 
        CardFlowWrapper cardWrapper = (CardFlowWrapper) JSON.deserialize(cardWrapperString, CardFlowWrapper.class);
        system.debug('wrapper complete: ' + cardWrapper);
        Case cs = new Case(); 
        cs.Agent__c  = cardWrapper.agentNumber;
        //cs.Agent__c  = cardWrapper.accountActivationDate;
        cs.Card_Number__c  = cardWrapper.enteredCardNumber;
        cs.First_Name__c  = cardWrapper.cardFirstName;
        cs.Last_Name__c   = cardWrapper.cardLastName;
        cs.Date_of_Birth__c   = cardWrapper.cardDOB;
        cs.Customer_Email__c = cardWrapper.cardEmail;
        cs.Program__c = cardWrapper.programId.right(3);
        //  cs.Service_Request__c = 'Customer information update';
        
        system.debug('cs1: ' + cs);
        
        
        try{
            insert cs;
        } catch (exception e){
            isSuccess = false; 
            system.debug(e.getMessage());
        } 
        
        system.debug('csId: ' + cs.Id);
        
        return isSuccess; 
    }
    
    
    @auraEnabled
    public static void getCardInfoCore(String cardNumber, String holderName){ 
        
        String jsonResponseToken;
        HttpRequest objReqToken = new HttpRequest();
        HttpResponse objRespToken = new HttpResponse(); 
        Http objHttpToken = new Http();
        objReqToken.setEndpoint('https://core.rapidefund.com:9014/prepaidservices/secure/oauth/token?grant_type=password&username=ChatakPrepaidAdminUser&password=ChatakPrepaidAdminPass');
        //objReq.setEndpoint('https://core.rapidefund.com:9014/GetCard?requestKey=CARD_NUMBER&requestValue=8WgVUE8hqqdFlxO/6Gtd+CXSEUKBnKH4enEMA8dlIGu8U4xDYc64GQTVpqHrVd0H');
        
        ///prepaidservices/rest/crm-external-services/getCustomer
        objReqToken.setMethod('GET');
        objReqToken.setHeader('Content-Type', 'application/json');   //'text/xml'
        objReqToken.setHeader('Authorization', 'Basic Q2hhdGFrUHJlcGFpZEFkbWluQmFzaWNBdXRoOkNoYXRha0FkbWluQFNlY3VyZQ=='); 
        
        
        objReqToken.setTimeout(120000);           
        objRespToken = objHttpToken.send(objReqToken);     
        String resBodyToken = objRespToken.getBody();//.replaceAll('Currency','CurrencyData'); 
        system.debug('resBody: ' + resBodyToken);
        ParseTokenJson n = ParseTokenJson.parse(resBodyToken);
        system.debug('tester: ' + n.access_token);
        
        
        String jsonResponse;
        HttpRequest objReq = new HttpRequest();
        HttpResponse objResp = new HttpResponse(); 
        Http objHttp = new Http();
        objReq.setEndpoint('https://core.rapidefund.com:9014/prepaidservices/rest/crm-external-services/getCustomer');
        String jsonBody ='{"requestKey":"CARD_NUMBER","requestValue":"8WgVUE8hqqdFlxO/6Gtd+CXSEUKBnKH4enEMA8dlIGu8U4xDYc64GQTVpqHrVd0H"}';
        
        objReq.setBody(jsonBody);
        HTTP auth = new HTTP(); 
        objReq.setMethod('POST');
        objReq.setHeader('Authorization', 'bearer ' + n.access_token);
        objReq.setHeader('Content-Type', 'application/json');   //'text/xml'
        objReq.setTimeout(120000);           
        objResp = objHttp.send(objReq);
        System.debug('$$$$' + objResp);      
        String resBody = objResp.getBody(); 
        system.debug('resBody: ' + resBody);
        CoreResponseJSONConverter cardResponse = CoreResponseJSONConverter.parse(resBody);
        CardFlowWrapper cardWrapper = new CardFlowWrapper();
        cardWrapper.errorMessage = cardResponse.errorMessage;
        cardWrapper.cardAccountNumber =  string.valueOf(cardResponse.customerAccounts[0].accountNumber);
        cardWrapper.accountActivationDate = Date.newInstance(integer.valueof(cardResponse.customerAccounts[0].accountActivationDate.substring(6,10)), integer.valueof(cardResponse.customerAccounts[0].accountActivationDate.left(2)), integer.valueof(cardResponse.customerAccounts[0].accountActivationDate.substring(3,5)));     
        cardWrapper.cardId =  string.valueOf(cardResponse.cards[0].cardId);   
        cardWrapper.cardLastFourDigits =  cardResponse.cards[0].cardLastFourDigits ; 
        cardWrapper.cardExpiringDate = Date.newInstance(integer.valueof(cardResponse.cards[0].cardExpirationDate.substring(6,10)), integer.valueof(cardResponse.cards[0].cardExpirationDate.left(2)), integer.valueof(cardResponse.cards[0].cardExpirationDate.substring(3,5)));  
        system.debug('cardExpiringDate: ' + cardResponse.cards[0].cardExpirationDate);
        cardWrapper.customerId =  string.valueOf(cardResponse.customerAccounts[0].customerId); 
        cardWrapper.cardFirstName =  cardResponse.customer.firstName; 
        cardWrapper.cardFirstName =  cardResponse.customer.lastName  ; 
        cardWrapper.cardDOB = Date.newInstance(integer.valueof(cardResponse.cards[0].dateOfBirth.substring(6,10)), integer.valueof(cardResponse.cards[0].dateOfBirth.left(2)), integer.valueof(cardResponse.cards[0].dateOfBirth.substring(3,5)));  
       system.debug('dateOfBirth: ' + cardResponse.cards[0].dateOfBirth);
         system.debug('ssn: ' + cardResponse.customer.ssn);
         system.debug('emailId: ' + cardResponse.customer.emailId);
       // cardWrapper.cardSSN =  cardResponse.customer.ssn.toString(); 
       // cardWrapper.cardEmail =  cardResponse.customer.emailId.toString()   ; 
        cardWrapper.accountStatus =  cardResponse.customerAccounts[0].accountStatus; 
        cardWrapper.cardAvailableBalance =  string.valueOf(cardResponse.customerAccounts[0].availableBalance); 
        cardWrapper.cardCurrentBalance =  string.valueOf(cardResponse.customerAccounts[0].currentBalance)  ; 
        cardWrapper.cardStatus =  cardResponse.cards[0].status  ; 
        cardWrapper.address1 =  cardResponse.cards[0].address1  ; 
        cardWrapper.address2 =  cardResponse.cards[0].address2  ; 
        cardWrapper.city =  cardResponse.cards[0].city  ; 
        cardWrapper.state =  cardResponse.cards[0].state  ; 
        cardWrapper.country =  cardResponse.cards[0].country  ; 
        cardWrapper.zip =  cardResponse.cards[0].zip  ;   
        system.debug('cardWrapper: ' + cardWrapper);
    }   
}   
