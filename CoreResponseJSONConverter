//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class CoreResponseJSONConverter {

	public class CustomerAddresses {
		public Integer id {get;set;} 
		public Integer customerId {get;set;} 
		public Object addressType {get;set;} 
		public String addressLine1 {get;set;} 
		public String addressLine2 {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String city {get;set;} 
		public String zip {get;set;} 
		public String crmStatus {get;set;} 

		public CustomerAddresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'customerId') {
							customerId = parser.getIntegerValue();
						} else if (text == 'addressType') {
							addressType = parser.readValueAs(Object.class);
						} else if (text == 'addressLine1') {
							addressLine1 = parser.getText();
						} else if (text == 'addressLine2') {
							addressLine2 = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'zip') {
							zip = parser.getText();
						} else if (text == 'crmStatus') {
							crmStatus = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerAddresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomerAccounts {
		public Integer customerAccountId {get;set;} 
		public Integer customerId {get;set;} 
		public Integer partnerId {get;set;} 
		public Integer bankId {get;set;} 
		public Long accountNumber {get;set;} 
		public Integer accountProgramId {get;set;} 
		public Integer feeProgramId {get;set;} 
		public Integer availableBalance {get;set;} 
		public Integer currentBalance {get;set;} 
		public String accountStatus {get;set;} 
		public String accountType {get;set;} 
		public Object lastTransactionDate {get;set;} 
		public Object cardInactivityPeriod {get;set;} 
		public Object maxBalanceLimit {get;set;} 
		public String accountCurrency {get;set;} 
		public Object freeATMWithdrawal {get;set;} 
		public Object freeAccountToAccountTransfer {get;set;} 
		public Object freeBalanceInquiry {get;set;} 
		public Object freeFundTransfeFromBank {get;set;} 
		public Object freeFundTransfeToBank {get;set;} 
		public Object freeLoadTxnThroughAgent {get;set;} 
		public Object freePOSTransaction {get;set;} 
		public String reason {get;set;} 
		public String lastTransactionNumber {get;set;} 
		public String createdDate {get;set;} 
		public String updatedDate {get;set;} 
		public Object updatedBy {get;set;} 
		public String createdBy {get;set;} 
		public Object nickName {get;set;} 
		public String amountTransferMode {get;set;} 
		public Integer inactivityPeriod {get;set;} 
		public String inactivityPeriodDuration {get;set;} 
		public Object cardInactivityPeriodDuration {get;set;} 
		public Object cardLoadCountLimit {get;set;} 
		public Object freePOSPinDays {get;set;} 
		public Object freePOSSignatureDays {get;set;} 
		public Object freeATMWithdrawalDays {get;set;} 
		public Object freeBalanceInquiryDays {get;set;} 
		public Object freeLoadTxnThroughAgentDays {get;set;} 
		public Object freeAccToAccTransferDays {get;set;} 
		public Object freeFundTransferToBankDays {get;set;} 
		public Object freeFundTransfeFromBankDays {get;set;} 
		public Object freeCashAdvanceDays {get;set;} 
		public String freeTransactionFrequencyType {get;set;} 
		public Object freeCashAdvance {get;set;} 
		public Object freePOSSignature {get;set;} 
		public Integer agentId {get;set;} 
		public String accountActivationDate {get;set;} 
		public Integer accountTypeId {get;set;} 
		public Object autoSweep {get;set;} 
		public Object sendFundsMode {get;set;} 
		public String crmStatus {get;set;} 
		public Object accountInactivePeriod {get;set;} 
		public String kycRequired {get;set;} 
		public String ofacRequired {get;set;} 
		public Object kycStatus {get;set;} 

		public CustomerAccounts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'customerAccountId') {
							customerAccountId = parser.getIntegerValue();
						} else if (text == 'customerId') {
							customerId = parser.getIntegerValue();
						} else if (text == 'partnerId') {
							partnerId = parser.getIntegerValue();
						} else if (text == 'bankId') {
							bankId = parser.getIntegerValue();
						} else if (text == 'accountNumber') {
							accountNumber = parser.getLongValue();
						} else if (text == 'accountProgramId') {
							accountProgramId = parser.getIntegerValue();
						} else if (text == 'feeProgramId') {
							feeProgramId = parser.getIntegerValue();
						} else if (text == 'availableBalance') {
							availableBalance = parser.getIntegerValue();
						} else if (text == 'currentBalance') {
							currentBalance = parser.getIntegerValue();
						} else if (text == 'accountStatus') {
							accountStatus = parser.getText();
						} else if (text == 'accountType') {
							accountType = parser.getText();
						} else if (text == 'lastTransactionDate') {
							lastTransactionDate = parser.readValueAs(Object.class);
						} else if (text == 'cardInactivityPeriod') {
							cardInactivityPeriod = parser.readValueAs(Object.class);
						} else if (text == 'maxBalanceLimit') {
							maxBalanceLimit = parser.readValueAs(Object.class);
						} else if (text == 'accountCurrency') {
							accountCurrency = parser.getText();
						} else if (text == 'freeATMWithdrawal') {
							freeATMWithdrawal = parser.readValueAs(Object.class);
						} else if (text == 'freeAccountToAccountTransfer') {
							freeAccountToAccountTransfer = parser.readValueAs(Object.class);
						} else if (text == 'freeBalanceInquiry') {
							freeBalanceInquiry = parser.readValueAs(Object.class);
						} else if (text == 'freeFundTransfeFromBank') {
							freeFundTransfeFromBank = parser.readValueAs(Object.class);
						} else if (text == 'freeFundTransfeToBank') {
							freeFundTransfeToBank = parser.readValueAs(Object.class);
						} else if (text == 'freeLoadTxnThroughAgent') {
							freeLoadTxnThroughAgent = parser.readValueAs(Object.class);
						} else if (text == 'freePOSTransaction') {
							freePOSTransaction = parser.readValueAs(Object.class);
						} else if (text == 'reason') {
							reason = parser.getText();
						} else if (text == 'lastTransactionNumber') {
							lastTransactionNumber = parser.getText();
						} else if (text == 'createdDate') {
							createdDate = parser.getText();
						} else if (text == 'updatedDate') {
							updatedDate = parser.getText();
						} else if (text == 'updatedBy') {
							updatedBy = parser.readValueAs(Object.class);
						} else if (text == 'createdBy') {
							createdBy = parser.getText();
						} else if (text == 'nickName') {
							nickName = parser.readValueAs(Object.class);
						} else if (text == 'amountTransferMode') {
							amountTransferMode = parser.getText();
						} else if (text == 'inactivityPeriod') {
							inactivityPeriod = parser.getIntegerValue();
						} else if (text == 'inactivityPeriodDuration') {
							inactivityPeriodDuration = parser.getText();
						} else if (text == 'cardInactivityPeriodDuration') {
							cardInactivityPeriodDuration = parser.readValueAs(Object.class);
						} else if (text == 'cardLoadCountLimit') {
							cardLoadCountLimit = parser.readValueAs(Object.class);
						} else if (text == 'freePOSPinDays') {
							freePOSPinDays = parser.readValueAs(Object.class);
						} else if (text == 'freePOSSignatureDays') {
							freePOSSignatureDays = parser.readValueAs(Object.class);
						} else if (text == 'freeATMWithdrawalDays') {
							freeATMWithdrawalDays = parser.readValueAs(Object.class);
						} else if (text == 'freeBalanceInquiryDays') {
							freeBalanceInquiryDays = parser.readValueAs(Object.class);
						} else if (text == 'freeLoadTxnThroughAgentDays') {
							freeLoadTxnThroughAgentDays = parser.readValueAs(Object.class);
						} else if (text == 'freeAccToAccTransferDays') {
							freeAccToAccTransferDays = parser.readValueAs(Object.class);
						} else if (text == 'freeFundTransferToBankDays') {
							freeFundTransferToBankDays = parser.readValueAs(Object.class);
						} else if (text == 'freeFundTransfeFromBankDays') {
							freeFundTransfeFromBankDays = parser.readValueAs(Object.class);
						} else if (text == 'freeCashAdvanceDays') {
							freeCashAdvanceDays = parser.readValueAs(Object.class);
						} else if (text == 'freeTransactionFrequencyType') {
							freeTransactionFrequencyType = parser.getText();
						} else if (text == 'freeCashAdvance') {
							freeCashAdvance = parser.readValueAs(Object.class);
						} else if (text == 'freePOSSignature') {
							freePOSSignature = parser.readValueAs(Object.class);
						} else if (text == 'agentId') {
							agentId = parser.getIntegerValue();
						} else if (text == 'accountActivationDate') {
							accountActivationDate = parser.getText();
						} else if (text == 'accountTypeId') {
							accountTypeId = parser.getIntegerValue();
						} else if (text == 'autoSweep') {
							autoSweep = parser.readValueAs(Object.class);
						} else if (text == 'sendFundsMode') {
							sendFundsMode = parser.readValueAs(Object.class);
						} else if (text == 'crmStatus') {
							crmStatus = parser.getText();
						} else if (text == 'accountInactivePeriod') {
							accountInactivePeriod = parser.readValueAs(Object.class);
						} else if (text == 'kycRequired') {
							kycRequired = parser.getText();
						} else if (text == 'ofacRequired') {
							ofacRequired = parser.getText();
						} else if (text == 'kycStatus') {
							kycStatus = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerAccounts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String errorCode {get;set;} 
	public String errorMessage {get;set;} 
	public List<CustomerAccounts> customerAccounts {get;set;} 
	public List<Cards> cards {get;set;} 
	public Customer customer {get;set;} 

	public CoreResponseJSONConverter(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'errorCode') {
						errorCode = parser.getText();
					} else if (text == 'errorMessage') {
						errorMessage = parser.getText();
					} else if (text == 'customerAccounts') {
						customerAccounts = arrayOfCustomerAccounts(parser);
					} else if (text == 'cards') {
						cards = arrayOfCards(parser);
					} else if (text == 'customer') {
						customer = new Customer(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Customer {
		public Integer customerId {get;set;} 
		public Integer programManagerId {get;set;} 
		public Object title {get;set;} 
		public String firstName {get;set;} 
		public Object middleName {get;set;} 
		public String lastName {get;set;} 
		public Object mobileNumber {get;set;} 
		public Object companyName {get;set;} 
		public String dob {get;set;} 
		public Object userName {get;set;} 
		public Object countryCitizenship {get;set;} 
		public Object countryResidence {get;set;} 
		public Object ssn {get;set;} 
		public Object emailId {get;set;} 
		public Object bankId {get;set;} 
		public String reason {get;set;} 
		public Object password {get;set;} 
		public Object loginMode {get;set;} 
		public Object passwordHistory {get;set;} 
		public Object securityKey {get;set;} 
		public Object securityQuestion {get;set;} 
		public Object securityAnswer {get;set;} 
		public Object passRetryCount {get;set;} 
		public Object lastPasswordChange {get;set;} 
		public Integer partnerId {get;set;} 
		public Integer userProfileGroupId {get;set;} 
		public String customerUserType {get;set;} 
		public Object kycError {get;set;} 
		public Object onlineAccessLevel {get;set;} 
		public Object lastEmailSentDate {get;set;} 
		public String createdDate {get;set;} 
		public String updatedDate {get;set;} 
		public Object updatedBy {get;set;} 
		public String createdBy {get;set;} 
		public Object extension {get;set;} 
		public Object notes {get;set;} 
		public Object prcaNumber {get;set;} 
		public Object homePhone {get;set;} 
		public Object officePhone {get;set;} 
		public Object autoSweep {get;set;} 
		public Object thresholdAmount {get;set;} 
		public Object sendFundsMode {get;set;} 
		public Object fax {get;set;} 
		public Object randomNumber {get;set;} 
		public Object federalTCC {get;set;} 
		public Object prefferedLanguage {get;set;} 
		public Object idProof {get;set;} 
		public Object idProofNumber {get;set;} 
		public Object ssnTinType {get;set;} 
		public Object tin {get;set;} 
		public Object permAddressName {get;set;} 
		public Object orderArbiterPayDebitCard {get;set;} 
		public Object receiveGameAssignment {get;set;} 
		public Object arbiterSportsEmail {get;set;} 
		public Object arbiterSportsPassword {get;set;} 
		public Object thresholdDate {get;set;} 
		public Object issuedPIN {get;set;} 
		public Object schoolDistrictTIN {get;set;} 
		public Object dayToTransfer {get;set;} 
		public Object cardRequired {get;set;} 
		public String crmStatus {get;set;} 
		public String kycRequired {get;set;} 
		public String ofacRequired {get;set;} 
		public Object kycStatus {get;set;} 
		public List<CustomerAddresses> customerAddresses {get;set;} 
		public String status {get;set;} 

		public Customer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'customerId') {
							customerId = parser.getIntegerValue();
						} else if (text == 'programManagerId') {
							programManagerId = parser.getIntegerValue();
						} else if (text == 'title') {
							title = parser.readValueAs(Object.class);
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'middleName') {
							middleName = parser.readValueAs(Object.class);
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else if (text == 'mobileNumber') {
							mobileNumber = parser.readValueAs(Object.class);
						} else if (text == 'companyName') {
							companyName = parser.readValueAs(Object.class);
						} else if (text == 'dob') {
							dob = parser.getText();
						} else if (text == 'userName') {
							userName = parser.readValueAs(Object.class);
						} else if (text == 'countryCitizenship') {
							countryCitizenship = parser.readValueAs(Object.class);
						} else if (text == 'countryResidence') {
							countryResidence = parser.readValueAs(Object.class);
						} else if (text == 'ssn') {
							ssn = parser.readValueAs(Object.class);
						} else if (text == 'emailId') {
							emailId = parser.readValueAs(Object.class);
						} else if (text == 'bankId') {
							bankId = parser.readValueAs(Object.class);
						} else if (text == 'reason') {
							reason = parser.getText();
						} else if (text == 'password') {
							password = parser.readValueAs(Object.class);
						} else if (text == 'loginMode') {
							loginMode = parser.readValueAs(Object.class);
						} else if (text == 'passwordHistory') {
							passwordHistory = parser.readValueAs(Object.class);
						} else if (text == 'securityKey') {
							securityKey = parser.readValueAs(Object.class);
						} else if (text == 'securityQuestion') {
							securityQuestion = parser.readValueAs(Object.class);
						} else if (text == 'securityAnswer') {
							securityAnswer = parser.readValueAs(Object.class);
						} else if (text == 'passRetryCount') {
							passRetryCount = parser.readValueAs(Object.class);
						} else if (text == 'lastPasswordChange') {
							lastPasswordChange = parser.readValueAs(Object.class);
						} else if (text == 'partnerId') {
							partnerId = parser.getIntegerValue();
						} else if (text == 'userProfileGroupId') {
							userProfileGroupId = parser.getIntegerValue();
						} else if (text == 'customerUserType') {
							customerUserType = parser.getText();
						} else if (text == 'kycError') {
							kycError = parser.readValueAs(Object.class);
						} else if (text == 'onlineAccessLevel') {
							onlineAccessLevel = parser.readValueAs(Object.class);
						} else if (text == 'lastEmailSentDate') {
							lastEmailSentDate = parser.readValueAs(Object.class);
						} else if (text == 'createdDate') {
							createdDate = parser.getText();
						} else if (text == 'updatedDate') {
							updatedDate = parser.getText();
						} else if (text == 'updatedBy') {
							updatedBy = parser.readValueAs(Object.class);
						} else if (text == 'createdBy') {
							createdBy = parser.getText();
						} else if (text == 'extension') {
							extension = parser.readValueAs(Object.class);
						} else if (text == 'notes') {
							notes = parser.readValueAs(Object.class);
						} else if (text == 'prcaNumber') {
							prcaNumber = parser.readValueAs(Object.class);
						} else if (text == 'homePhone') {
							homePhone = parser.readValueAs(Object.class);
						} else if (text == 'officePhone') {
							officePhone = parser.readValueAs(Object.class);
						} else if (text == 'autoSweep') {
							autoSweep = parser.readValueAs(Object.class);
						} else if (text == 'thresholdAmount') {
							thresholdAmount = parser.readValueAs(Object.class);
						} else if (text == 'sendFundsMode') {
							sendFundsMode = parser.readValueAs(Object.class);
						} else if (text == 'fax') {
							fax = parser.readValueAs(Object.class);
						} else if (text == 'randomNumber') {
							randomNumber = parser.readValueAs(Object.class);
						} else if (text == 'federalTCC') {
							federalTCC = parser.readValueAs(Object.class);
						} else if (text == 'prefferedLanguage') {
							prefferedLanguage = parser.readValueAs(Object.class);
						} else if (text == 'idProof') {
							idProof = parser.readValueAs(Object.class);
						} else if (text == 'idProofNumber') {
							idProofNumber = parser.readValueAs(Object.class);
						} else if (text == 'ssnTinType') {
							ssnTinType = parser.readValueAs(Object.class);
						} else if (text == 'tin') {
							tin = parser.readValueAs(Object.class);
						} else if (text == 'permAddressName') {
							permAddressName = parser.readValueAs(Object.class);
						} else if (text == 'orderArbiterPayDebitCard') {
							orderArbiterPayDebitCard = parser.readValueAs(Object.class);
						} else if (text == 'receiveGameAssignment') {
							receiveGameAssignment = parser.readValueAs(Object.class);
						} else if (text == 'arbiterSportsEmail') {
							arbiterSportsEmail = parser.readValueAs(Object.class);
						} else if (text == 'arbiterSportsPassword') {
							arbiterSportsPassword = parser.readValueAs(Object.class);
						} else if (text == 'thresholdDate') {
							thresholdDate = parser.readValueAs(Object.class);
						} else if (text == 'issuedPIN') {
							issuedPIN = parser.readValueAs(Object.class);
						} else if (text == 'schoolDistrictTIN') {
							schoolDistrictTIN = parser.readValueAs(Object.class);
						} else if (text == 'dayToTransfer') {
							dayToTransfer = parser.readValueAs(Object.class);
						} else if (text == 'cardRequired') {
							cardRequired = parser.readValueAs(Object.class);
						} else if (text == 'crmStatus') {
							crmStatus = parser.getText();
						} else if (text == 'kycRequired') {
							kycRequired = parser.getText();
						} else if (text == 'ofacRequired') {
							ofacRequired = parser.getText();
						} else if (text == 'kycStatus') {
							kycStatus = parser.readValueAs(Object.class);
						} else if (text == 'customerAddresses') {
							customerAddresses = arrayOfCustomerAddresses(parser);
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Customer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Cards {
		public Integer cardId {get;set;} 
		public String cardNumber {get;set;} 
		public Integer accountId {get;set;} 
		public Integer customerId {get;set;} 
		public Integer agentId {get;set;} 
		public Integer cardProgramId {get;set;} 
		public String firstName {get;set;} 
		public String lastName {get;set;} 
		public String dateOfBirth {get;set;} 
		public String address1 {get;set;} 
		public String address2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String zip {get;set;} 
		public String status {get;set;} 
		public Object photo {get;set;} 
		public Object cardPersonalize {get;set;} 
		public String pinOffset {get;set;} 
		public String cardExpirationDate {get;set;} 
		public String cardActivationDate {get;set;} 
		public Object primaryCard {get;set;} 
		public String cardType {get;set;} 
		public Integer cardEmobossed {get;set;} 
		public Integer cardBatch {get;set;} 
		public Integer wrongPinCount {get;set;} 
		public Integer accountProgramId {get;set;} 
		public Object reason {get;set;} 
		public Integer serialNumber {get;set;} 
		public String cardToken {get;set;} 
		public String tav {get;set;} 
		public String cardLoaded {get;set;} 
		public String cardLastFourDigits {get;set;} 
		public String createdBy {get;set;} 
		public String createdDate {get;set;} 
		public String updatedDate {get;set;} 
		public String updatedBy {get;set;} 
		public String enableCardDownload {get;set;} 
		public String cardUID {get;set;} 
		public Object iTav {get;set;} 
		public String crmStatus {get;set;} 
		public String kycRequired {get;set;} 
		public String ofacRequired {get;set;} 
		public Object kycStatus {get;set;} 

		public Cards(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cardId') {
							cardId = parser.getIntegerValue();
						} else if (text == 'cardNumber') {
							cardNumber = parser.getText();
						} else if (text == 'accountId') {
							accountId = parser.getIntegerValue();
						} else if (text == 'customerId') {
							customerId = parser.getIntegerValue();
						} else if (text == 'agentId') {
							agentId = parser.getIntegerValue();
						} else if (text == 'cardProgramId') {
							cardProgramId = parser.getIntegerValue();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else if (text == 'dateOfBirth') {
							dateOfBirth = parser.getText();
						} else if (text == 'address1') {
							address1 = parser.getText();
						} else if (text == 'address2') {
							address2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'zip') {
							zip = parser.getText();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'photo') {
							photo = parser.readValueAs(Object.class);
						} else if (text == 'cardPersonalize') {
							cardPersonalize = parser.readValueAs(Object.class);
						} else if (text == 'pinOffset') {
							pinOffset = parser.getText();
						} else if (text == 'cardExpirationDate') {
							cardExpirationDate = parser.getText();
						} else if (text == 'cardActivationDate') {
							cardActivationDate = parser.getText();
						} else if (text == 'primaryCard') {
							primaryCard = parser.readValueAs(Object.class);
						} else if (text == 'cardType') {
							cardType = parser.getText();
						} else if (text == 'cardEmobossed') {
							cardEmobossed = parser.getIntegerValue();
						} else if (text == 'cardBatch') {
							cardBatch = parser.getIntegerValue();
						} else if (text == 'wrongPinCount') {
							wrongPinCount = parser.getIntegerValue();
						} else if (text == 'accountProgramId') {
							accountProgramId = parser.getIntegerValue();
						} else if (text == 'reason') {
							reason = parser.readValueAs(Object.class);
						} else if (text == 'serialNumber') {
							serialNumber = parser.getIntegerValue();
						} else if (text == 'cardToken') {
							cardToken = parser.getText();
						} else if (text == 'tav') {
							tav = parser.getText();
						} else if (text == 'cardLoaded') {
							cardLoaded = parser.getText();
						} else if (text == 'cardLastFourDigits') {
							cardLastFourDigits = parser.getText();
						} else if (text == 'createdBy') {
							createdBy = parser.getText();
						} else if (text == 'createdDate') {
							createdDate = parser.getText();
						} else if (text == 'updatedDate') {
							updatedDate = parser.getText();
						} else if (text == 'updatedBy') {
							updatedBy = parser.getText();
						} else if (text == 'enableCardDownload') {
							enableCardDownload = parser.getText();
						} else if (text == 'cardUID') {
							cardUID = parser.getText();
						} else if (text == 'iTav') {
							iTav = parser.readValueAs(Object.class);
						} else if (text == 'crmStatus') {
							crmStatus = parser.getText();
						} else if (text == 'kycRequired') {
							kycRequired = parser.getText();
						} else if (text == 'ofacRequired') {
							ofacRequired = parser.getText();
						} else if (text == 'kycStatus') {
							kycStatus = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Cards consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static CoreResponseJSONConverter parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new CoreResponseJSONConverter(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Cards> arrayOfCards(System.JSONParser p) {
        List<Cards> res = new List<Cards>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Cards(p));
        }
        return res;
    }





    private static List<CustomerAddresses> arrayOfCustomerAddresses(System.JSONParser p) {
        List<CustomerAddresses> res = new List<CustomerAddresses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CustomerAddresses(p));
        }
        return res;
    }






    private static List<CustomerAccounts> arrayOfCustomerAccounts(System.JSONParser p) {
        List<CustomerAccounts> res = new List<CustomerAccounts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CustomerAccounts(p));
        }
        return res;
    }



}
